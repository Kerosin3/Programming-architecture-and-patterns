use serde::{Deserialize, Serialize};

use serde_with::serde_as;
use serde_with::{Bytes, BytesOrString, NoneAsEmptyString};
use std::env;
use std::fs::File;
use std::io::Read;
use std::io::Write;
use std::ops::Deref;
# https://stackoverflow.com/questions/67168397/how-does-serde-bincode-serialize-byte-arrays <=====
fn main() -> Result<(), std::io::Error> {
    let cur_dir_path = env::current_dir()?; // get current dir
    let filename = cur_dir_path.join("somefile");

    let mut opened_file = File::create(&filename)?;
    let struct_to_write: Arrays<2> = Arrays {
        bytes: [b'A'; 2],
        message: Some("hello!".to_string()),
    };
    println!("struct is {:?}", struct_to_write);
    let t: Vec<u8> = postcard::to_allocvec(&struct_to_write).unwrap();
    opened_file.write_all(&t)?;

    //let mut open_file = File::open(&filename)?;
    //let mut buffer_read: Vec<u8> = vec![];
    //let _readed = open_file.read_to_end(&mut buffer_read)?;
    let recovered: Arrays<2> = postcard::from_bytes(&t.deref()).unwrap();
    println!("{:?}", recovered);
    Ok(())
}
#[serde_as]
#[derive(Serialize, Deserialize, Debug, Eq, PartialEq)]
struct Arrays<const N: usize> {
    #[serde_as(as = "Bytes")]
    bytes: [u8; N],
    #[serde_as(as = "NoneAsEmptyString")]
    message: Option<String>,
}
